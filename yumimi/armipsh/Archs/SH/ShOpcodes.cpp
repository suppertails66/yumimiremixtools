#include "stdafx.h"
#include "ShOpcodes.h"
#include "Core/Common.h"
#include "Sh.h"
#include "CShInstruction.h"


const tShOpcode ShOpcodes[] = {
  { "clrt", "", 0x0008, 0, SH_IFMT_0, 0 },
  { "clrmac", "", 0x0028, 0, SH_IFMT_0, 0 },
  { "div1u", "", 0x0019, 0, SH_IFMT_0, 0 },
  { "nop", "", 0x0009, 0, SH_IFMT_0, 0 },
  { "rte", "", 0x002B, 0, SH_IFMT_0, 0 },
  { "rts", "", 0x000B, 0, SH_IFMT_0, 0 },
  { "sett", "", 0x0018, 0, SH_IFMT_0, 0 },
  { "sleep", "", 0x001B, 0, SH_IFMT_0, 0 },
  { "cmp/pl", "rn", 0x4015, 0, SH_IFMT_N, 0 },
  { "cmp/pz", "rn", 0x4011, 0, SH_IFMT_N, 0 },
  { "dt", "rn", 0x4010, 0, SH_IFMT_N, SH_SH2ONLY },
  { "movt", "rn", 0x0029, 0, SH_IFMT_N, 0 },
  { "rotl", "rn", 0x4004, 0, SH_IFMT_N, 0 },
  { "rotr", "rn", 0x4005, 0, SH_IFMT_N, 0 },
  { "rotcl", "rn", 0x4024, 0, SH_IFMT_N, 0 },
  { "rotcr", "rn", 0x4025, 0, SH_IFMT_N, 0 },
  { "shal", "rn", 0x4020, 0, SH_IFMT_N, 0 },
  { "shar", "rn", 0x4021, 0, SH_IFMT_N, 0 },
  { "shll", "rn", 0x4000, 0, SH_IFMT_N, 0 },
  { "shlr", "rn", 0x4001, 0, SH_IFMT_N, 0 },
  { "shll2", "rn", 0x4008, 0, SH_IFMT_N, 0 },
  { "shlr2", "rn", 0x4009, 0, SH_IFMT_N, 0 },
  { "shll8", "rn", 0x4018, 0, SH_IFMT_N, 0 },
  { "shlr8", "rn", 0x4019, 0, SH_IFMT_N, 0 },
  { "shll06", "rn", 0x4028, 0, SH_IFMT_N, 0 },
  { "shlr06", "rn", 0x4029, 0, SH_IFMT_N, 0 },
  { "stc", "sr,rn", 0x0002, 0, SH_IFMT_N, 0 },
  { "stc", "gbr,rn", 0x0012, 0, SH_IFMT_N, 0 },
  { "stc", "vbr,rn", 0x0022, 0, SH_IFMT_N, 0 },
  { "sts", "mach,rn", 0x000A, 0, SH_IFMT_N, 0 },
  { "sts", "macl,rn", 0x001A, 0, SH_IFMT_N, 0 },
  { "sts", "pr,rn", 0x002A, 0, SH_IFMT_N, 0 },
  { "tas.b", "$rn", 0x401B, 1, SH_IFMT_N, 0 },
  { "stc.l", "sr,$-rn", 0x4003, 4, SH_IFMT_N, 0 },
  { "stc.l", "gbr,$-rn", 0x4013, 4, SH_IFMT_N, 0 },
  { "stc.l", "vbr,$-rn", 0x4023, 4, SH_IFMT_N, 0 },
  { "sts.l", "mach,$-rn", 0x4002, 4, SH_IFMT_N, 0 },
  { "sts.l", "macl,$-rn", 0x4012, 4, SH_IFMT_N, 0 },
  { "sts.l", "pr,$-rn", 0x4022, 4, SH_IFMT_N, 0 },
  { "ldc", "rm,sr", 0x400E, 0, SH_IFMT_M, 0 },
  { "ldc", "rm,gbr", 0x401E, 0, SH_IFMT_M, 0 },
  { "ldc", "rm,vbr", 0x402E, 0, SH_IFMT_M, 0 },
  { "lds", "rm,mach", 0x400A, 0, SH_IFMT_M, 0 },
  { "lds", "rm,macl", 0x401A, 0, SH_IFMT_M, 0 },
  { "lds", "rm,pr", 0x402A, 0, SH_IFMT_M, 0 },
  { "jmp", "$rm", 0x402B, 0, SH_IFMT_M, 0 },
  { "jsr", "$rm", 0x400B, 0, SH_IFMT_M, 0 },
  { "ldc.l", "$rm+,sr", 0x4007, 4, SH_IFMT_M, 0 },
  { "ldc.l", "$rm+,gbr", 0x4017, 4, SH_IFMT_M, 0 },
  { "ldc.l", "$rm+,vbr", 0x4027, 4, SH_IFMT_M, 0 },
  { "lds.l", "$rm+,mach", 0x4006, 4, SH_IFMT_M, 0 },
  { "lds.l", "$rm+,macl", 0x4016, 4, SH_IFMT_M, 0 },
  { "lds.l", "$rm+,pr", 0x4026, 4, SH_IFMT_M, 0 },
  { "braf", "rm", 0x0023, 0, SH_IFMT_M, SH_SH2ONLY },
  { "bsrf", "rm", 0x0003, 0, SH_IFMT_M, SH_SH2ONLY },
  { "add", "rm,rn", 0x300C, 0, SH_IFMT_NM, 0 },
  { "addc", "rm,rn", 0x300E, 0, SH_IFMT_NM, 0 },
  { "addv", "rm,rn", 0x300F, 0, SH_IFMT_NM, 0 },
  { "and", "rm,rn", 0x2009, 0, SH_IFMT_NM, 0 },
  { "cmp/eq", "rm,rn", 0x3000, 0, SH_IFMT_NM, 0 },
  { "cmp/hs", "rm,rn", 0x3002, 0, SH_IFMT_NM, 0 },
  { "cmp/ge", "rm,rn", 0x3003, 0, SH_IFMT_NM, 0 },
  { "cmp/hi", "rm,rn", 0x3006, 0, SH_IFMT_NM, 0 },
  { "cmp/gt", "rm,rn", 0x3007, 0, SH_IFMT_NM, 0 },
  { "cmp/str", "rm,rn", 0x200C, 0, SH_IFMT_NM, 0 },
  { "div0", "rm,rn", 0x3004, 0, SH_IFMT_NM, 0 },
  { "div1s", "rm,rn", 0x2007, 0, SH_IFMT_NM, 0 },
  { "dmuls.l", "rm,rn", 0x300D, 4, SH_IFMT_NM, SH_SH2ONLY },
  { "dmulu.l", "rm,rn", 0x3005, 4, SH_IFMT_NM, SH_SH2ONLY },
  { "exts.b", "rm,rn", 0x600E, 1, SH_IFMT_NM, 0 },
  { "exts.w", "rm,rn", 0x600F, 2, SH_IFMT_NM, 0 },
  { "extu.b", "rm,rn", 0x600C, 1, SH_IFMT_NM, 0 },
  { "extu.w", "rm,rn", 0x600D, 2, SH_IFMT_NM, 0 },
  { "mov", "rm,rn", 0x6003, 0, SH_IFMT_NM, 0 },
  { "mul.l", "rm,rn", 0x0007, 4, SH_IFMT_NM, SH_SH2ONLY },
  { "muls.w", "rm,rn", 0x200F, 2, SH_IFMT_NM, 0 },
  { "mulu.w", "rm,rn", 0x200E, 2, SH_IFMT_NM, 0 },
  { "neg", "rm,rn", 0x600B, 0, SH_IFMT_NM, 0 },
  { "negc", "rm,rn", 0x600A, 0, SH_IFMT_NM, 0 },
  { "not", "rm,rn", 0x6007, 0, SH_IFMT_NM, 0 },
  { "or", "rm,rn", 0x200B, 0, SH_IFMT_NM, 0 },
  { "sub", "rm,rn", 0x3008, 0, SH_IFMT_NM, 0 },
  { "subc", "rm,rn", 0x300A, 0, SH_IFMT_NM, 0 },
  { "subv", "rm,rn", 0x300B, 0, SH_IFMT_NM, 0 },
  { "swap.b", "rm,rn", 0x6008, 1, SH_IFMT_NM, 0 },
  { "swap.w", "rm,rn", 0x6009, 2, SH_IFMT_NM, 0 },
  { "tst", "rm,rn", 0x2008, 0, SH_IFMT_NM, 0 },
  { "xor", "rm,rn", 0x200A, 0, SH_IFMT_NM, 0 },
  { "xtrct", "rm,rn", 0x200D, 0, SH_IFMT_NM, 0 },
  { "mov.b", "rm,$rn", 0x2000, 1, SH_IFMT_NM, 0 },
  { "mov.w", "rm,$rn", 0x2001, 2, SH_IFMT_NM, 0 },
  { "mov.l", "rm,$rn", 0x2002, 4, SH_IFMT_NM, 0 },
  { "mov.b", "$rm,rn", 0x6000, 1, SH_IFMT_NM, 0 },
  { "mov.w", "$rm,rn", 0x6001, 2, SH_IFMT_NM, 0 },
  { "mov.l", "$rm,rn", 0x6002, 4, SH_IFMT_NM, 0 },
  { "mac.l", "$rm+,$rn+", 0x000F, 4, SH_IFMT_NM, SH_SH2ONLY },
  { "mac.w", "$rm+,$rn+", 0x400F, 2, SH_IFMT_NM, 0 },
  { "mov.b", "$rm+,rn", 0x6004, 1, SH_IFMT_NM, 0 },
  { "mov.w", "$rm+,rn", 0x6005, 2, SH_IFMT_NM, 0 },
  { "mov.l", "$rm+,rn", 0x6006, 4, SH_IFMT_NM, 0 },
  { "mov.b", "rm,$-rn", 0x2004, 1, SH_IFMT_NM, 0 },
  { "mov.w", "rm,$-rn", 0x2005, 2, SH_IFMT_NM, 0 },
  { "mov.l", "rm,$-rn", 0x2006, 4, SH_IFMT_NM, 0 },
  { "mov.b", "rm,$(r0|rn)", 0x0004, 1, SH_IFMT_NM, 0 },
  { "mov.w", "rm,$(r0|rn)", 0x0005, 2, SH_IFMT_NM, 0 },
  { "mov.l", "rm,$(r0|rn)", 0x0006, 4, SH_IFMT_NM, 0 },
  { "mov.b", "$(r0|rm),rn", 0x000C, 1, SH_IFMT_NM, 0 },
  { "mov.w", "$(r0|rm),rn", 0x000D, 2, SH_IFMT_NM, 0 },
  { "mov.l", "$(r0|rm),rn", 0x000E, 4, SH_IFMT_NM, 0 },
  { "mov.b", "$(d4|rm),r0", 0x8400, 1, SH_IFMT_MD, 0 },
  { "mov.w", "$(d4|rm),r0", 0x8500, 2, SH_IFMT_MD, 0 },
  { "mov.b", "r0,$(d4|rn)", 0x8000, 1, SH_IFMT_ND4, 0 },
  { "mov.w", "r0,$(d4|rn)", 0x8100, 2, SH_IFMT_ND4, 0 },
  { "mov.l", "rm,$(d4|rn)", 0x1000, 4, SH_IFMT_NMD, 0 },
  { "mov.l", "$(d4|rm),rn", 0x5000, 4, SH_IFMT_NMD, 0 },
  { "mov.b", "r0,$(d8|gbr)", 0xC000, 1, SH_IFMT_D, 0 },
  { "mov.w", "r0,$(d8|gbr)", 0xC100, 2, SH_IFMT_D, 0 },
  { "mov.l", "r0,$(d8|gbr)", 0xC200, 4, SH_IFMT_D, 0 },
  { "mov.b", "$(d8|gbr),r0", 0xC400, 1, SH_IFMT_D, 0 },
  { "mov.w", "$(d8|gbr),r0", 0xC500, 2, SH_IFMT_D, 0 },
  { "mov.l", "$(d8|gbr),r0", 0xC600, 4, SH_IFMT_D, 0 },
  { "mova", "$(d8|pc),r0", 0xC700, 4, SH_IFMT_D, 0 },
  { "bf", "d8", 0x8B00, 0, SH_IFMT_D, 0 },
  { "bf/s", "d8", 0x8F00, 0, SH_IFMT_D, SH_SH2ONLY },
  { "bt", "d8", 0x8900, 0, SH_IFMT_D, 0 },
  { "bt/s", "d8", 0x8D00, 0, SH_IFMT_D, SH_SH2ONLY },
  { "bra", "d12", 0xA000, 0, SH_IFMT_D12, 0 },
  { "bsr", "d12", 0xB000, 0, SH_IFMT_D12, 0 },
  { "mov.w", "$(d8|pc),rn", 0x9000, 2, SH_IFMT_ND8, 0 },
  { "mov.l", "$(d8|pc),rn", 0xD000, 4, SH_IFMT_ND8, 0 },
  { "and.b", "iz,$(r0|gbr)", 0xCD00, 1, SH_IFMT_I, 0 },
  { "or.b", "iz,$(r0|gbr)", 0xCF00, 1, SH_IFMT_I, 0 },
  { "tst.b", "iz,$(r0|gbr)", 0xCC00, 1, SH_IFMT_I, 0 },
  { "xor.b", "iz,$(r0|gbr)", 0xCE00, 1, SH_IFMT_I, 0 },
  { "and", "iz,r0", 0xC900, 0, SH_IFMT_I, 0 },
  { "cmp/eq", "is,r0", 0x8800, 0, SH_IFMT_I, 0 },
  { "or", "iz,r0", 0xCB00, 0, SH_IFMT_I, 0 },
  { "tst", "iz,r0", 0xC800, 0, SH_IFMT_I, 0 },
  { "xor", "iz,r0", 0xCA00, 0, SH_IFMT_I, 0 },
  { "trapa", "izq", 0xC300, 0, SH_IFMT_I, 0 },
  { "add", "is,rn", 0x7000, 0, SH_IFMT_NI, 0 },
  { "mov", "is,rn", 0xE000, 0, SH_IFMT_NI, 0 },

  // alias of byte-sized mov to facilitate defining macros named "mov"
  { "mov.b", "is,rn", 0xE000, 0, SH_IFMT_NI, 0 },
  
  // list terminator -- the condition to check is that name == nullptr
	{ nullptr,	nullptr,				0,			0,			0, 0 }
};

const tShAmode ShAmodes[] = {
//  { "", SH_AMODE_NONE },
  { "rn", SH_AMODE_RN },
  { "rm", SH_AMODE_RM },
  { "$rn", SH_AMODE_ATRN },
  { "$rm", SH_AMODE_ATRM },
  { "$rn+", SH_AMODE_ATRNPL },
  { "$rm+", SH_AMODE_ATRMPL },
  { "$-rn", SH_AMODE_ATMIRN },
  { "$-rm", SH_AMODE_ATMIRM },
  { "$(d4|rn)", SH_AMODE_ATD4RN },
  { "$(d4|rm)", SH_AMODE_ATD4RM },
  { "$(r0|rn)", SH_AMODE_ATR0RN },
  { "$(r0|rm)", SH_AMODE_ATR0RM },
  { "$(d8|gbr)", SH_AMODE_ATD8GBR },
  { "$(r0|gbr)", SH_AMODE_ATR0GBR },
  { "$(d8|pc)", SH_AMODE_ATD8PC },
  { "d8", SH_AMODE_D8 },
  { "d12", SH_AMODE_D12 },
//  { "?n", SH_AMODE_QSN },
//  { "?m", SH_AMODE_QSM },
  { "iz", SH_AMODE_IZ },
  { "is", SH_AMODE_IS },
  { "izq", SH_AMODE_IZQ },
  // special mode used for ps
//  { "IMMED", SH_AMODE_VIRTUAL_IMMED },

  // list terminator -- the condition to check is that name == nullptr
	{ nullptr,	0 }
};
